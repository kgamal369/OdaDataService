Class Name: Addon

Class Description:
Represents additional features or services associated with an apartment, including details like name, type, price, brand, creation, and modification dates. 

Class Attributes:
- Addonid (int): Unique identifier.
- Addonname (string): Name (2-100 characters, required).
- Addontype (string): Type (validated against predefined types, required).
- Priceperunit (decimal): Cost per unit (must be > 0, required).
- Description (string): Additional details.
- Brand (string): Brand name.
- Createddatetime (DateTime): Creation timestamp.
- Lastmodifieddatetime (DateTime): Last update timestamp.
- Apartmentaddons (ICollection<Apartmentaddon>): Relations with apartments.

Relations:
- Apartmentaddon: One-to-many relationship with Apartmentaddon.

Functions and Endpoints:
1. Get All Addons
   - Endpoint: `/api/Addon` 
   - Method: `GET` 
   - Retrieves a list of all addons.

2. Get Addon by ID
   - Endpoint: `/api/Addon/{id}` 
   - Method: `GET` 
   - Retrieves addon by `Addonid`.

3. Update Addon
   - Endpoint: `/api/Addon/{id}` 
   - Method: `PUT` 
   - Updates details of an addon.

4. Update Addon Price
   - Endpoint: `/api/Addon/{id}/price` 
   - Method: `PUT` 
   - Updates price per unit.

5. Create Addon
   - Endpoint: `/api/Addon` 
   - Method: `POST` 
   - Creates a new addon.

6. Delete Addon
   - Endpoint: `/api/Addon/{id}` 
   - Method: `DELETE` 
   - Deletes addon by `Addonid`.

_____________________________________________
Class Name:  Apartmentaddon

Class Description:
Represents the association between an apartment and addons, including details about availability, assignment, and installation. Tracks configuration status and updates over time.

Class Attributes:
- Apartmentaddonsid (int): Unique identifier.
- Apartmentid (int?): ID of the associated apartment.
- Addonid (int?): ID of the linked addon.
- Availableaddons (bool?): Indicates if the addon is available.
- Assignedaddons (bool?): Indicates if the addon is assigned.
- Maxavailable (int?): Maximum available units of the addon.
- Installedamount (int?): Number of installed units.
- Createdatetime (DateTime?): Creation timestamp.
- Lastmodifieddatetime (DateTime?): Last update timestamp.
- Addon (Addon?): Reference to the related Addon.
- Apartment (Apartment?): Reference to the associated Apartment.

Relations:
- Addon: Many-to-one relationship with the `Addon` class.
- Apartment: Many-to-one relationship with the `Apartment` class.

Functions and Endpoints:
1. Get All Apartmentaddons
   - Endpoint: `/api/Apartmentaddon` 
   - Method: `GET` 
   - Retrieves all apartment-addon associations.

2. Get Apartmentaddon by ID
   - Endpoint: `/api/Apartmentaddon/{id}` 
   - Method: `GET` 
   - Retrieves a specific association by `Apartmentaddonsid`.

3. Update Apartmentaddon
   - Endpoint: `/api/Apartmentaddon/{id}` 
   - Method: `PUT` 
   - Updates the details of a specific association.

4. Create Apartmentaddon
   - Endpoint: `/api/Apartmentaddon` 
   - Method: `POST` 
   - Creates a new apartment-addon association.

5. Delete Apartmentaddon
   - Endpoint: `/api/Apartmentaddon/{id}` 
   - Method: `DELETE` 
   - Deletes a specific association by `Apartmentaddonsid`.

_________________________________________________________________

Class Name: Apartment

Class Description:
Represents an apartment with details such as name, type, status, space, photos, and associated project information. It manages the relationship with addons, packages, and bookings, including price calculations.

Class Attributes:
- Apartmentid (int): Unique identifier.
- Apartmentname (string?): Name (2-100 characters, required).
- Apartmenttype (string?): Type (validated against predefined types, required).
- Apartmentstatus (string?): Status (validated, required).
- Apartmentspace (decimal?): Space in square meters (10-1000, required).
- Description (string?): Additional details.
- Apartmentphotos (List<byte[]>?): List of apartment photos.
- Projectid (int?): Associated project ID.
- Floornumber (int?): Floor number of the apartment.
- Availabilitydate (DateTime?): Availability date.
- Createddatetime (DateTime?): Creation timestamp.
- Lastmodifieddatetime (DateTime?): Last update timestamp.
- Apartmentaddons (ICollection<Apartmentaddon>): Linked addons.
- Bookings (ICollection<Booking>): Linked bookings.
- Packages (ICollection<Package>): Linked packages.
- Project (Project?): Associated project reference.

Relations:
- Apartmentaddon: One-to-many relationship with `Apartmentaddon`.
- Booking: One-to-many relationship with `Booking`.
- Package: One-to-many relationship with `Package`.
- Project: Many-to-one relationship with `Project`.

Functions and Endpoints:
1. Get All Apartments
   - Endpoint: `/api/Apartment` 
   - Method: `GET` 
   - Retrieves all apartments.

2. Get Apartment by ID
   - Endpoint: `/api/Apartment/{id}` 
   - Method: `GET` 
   - Retrieves a specific apartment by `Apartmentid`.

3. Update Apartment
   - Endpoint: `/api/Apartment/{id}` 
   - Method: `PUT` 
   - Updates details of a specific apartment.

4. Create Apartment
   - Endpoint: `/api/Apartment` 
   - Method: `POST` 
   - Creates a new apartment record.

5. Delete Apartment
   - Endpoint: `/api/Apartment/{id}` 
   - Method: `DELETE` 
   - Deletes an apartment by `Apartmentid`.

6. Get Apartment Total Price
   - Endpoint: `/api/Apartment/{id}/totalPrice` 
   - Method: `GET` 
   - Calculates and returns the total price of the apartment.

7. Add Package to Apartment
   - Endpoint: `/api/Apartment/{id}/addPackage/{packageId}` 
   - Method: `POST` 
   - Adds a package to an apartment.

8. Assign Package to Apartment
   - Endpoint: `/api/Apartment/{id}/assignPackage/{packageId}` 
   - Method: `POST` 
   - Assigns a package as the primary package for an apartment.

9. Add Addon to Apartment
   - Endpoint: `/api/Apartment/{id}/addAddon/{addonId}/{maxAvailable}` 
   - Method: `POST` 
   - Adds an addon to an apartment.

10. Assign Addon to Apartment
    - Endpoint: `/api/Apartment/{id}/assignAddon/{addonId}/{installedAmount}` 
    - Method: `POST` 
    - Assigns an addon to an apartment.

11. Remove Addon from Apartment
    - Endpoint: `/api/Apartment/{id}/removeAddon/{addonId}` 
    - Method: `DELETE` 
    - Removes an addon from an apartment.

12. Get Available Packages
    - Endpoint: `/api/Apartment/{id}/availablePackages` 
    - Method: `GET` 
    - Retrieves all available packages for an apartment.

13. Get Available AddOns
    - Endpoint: `/api/Apartment/{id}/availableAddOns` 
    - Method: `GET` 
    - Retrieves all available addons for an apartment.

14. Get Assigned Packages
    - Endpoint: `/api/Apartment/{id}/assignedPackages` 
    - Method: `GET` 
    - Retrieves all assigned packages for an apartment.

15. Get Assigned AddOns
    - Endpoint: `/api/Apartment/{id}/assignedAddOns` 
    - Method: `GET` 
    - Retrieves all assigned addons for an apartment.

_____________________________________________________________
Class Name: Booking

Class Description:
Represents a booking for an apartment by a customer, including information on booking status, total amount, and associations with users, apartments, and invoices.

Class Attributes:
- Bookingid (int): Unique identifier.
- Customerid (int?): ID of the customer (required).
- Apartmentid (int?): ID of the apartment (required).
- Createdatetime (DateTime?): Creation timestamp.
- Lastmodifieddatetime (DateTime?): Last update timestamp.
- Bookingstatus (string?): Status of the booking (required, validated).
- Userid (int?): ID of the user who handled the booking.
- Totalamount (decimal?): Total amount for the booking (required, range: 10-10M EGP).
- Apartment (Apartment?): Reference to the associated apartment.
- Customer (Customer?): Reference to the associated customer.
- Invoices (ICollection<Invoice>): Related invoices.
- User (User?): Reference to the handling user.

Relations:
- Apartment: Many-to-one relationship with `Apartment`.
- Customer: Many-to-one relationship with `Customer`.
- Invoice: One-to-many relationship with `Invoice`.
- User: Many-to-one relationship with `User`.

Functions and Endpoints:
1. Get All Bookings
   - Endpoint: `/api/Booking` 
   - Method: `GET` 
   - Retrieves all bookings.

2. Get Booking by ID
   - Endpoint: `/api/Booking/{id}` 
   - Method: `GET` 
   - Retrieves a specific booking by `Bookingid`.

3. Update Booking
   - Endpoint: `/api/Booking/{id}` 
   - Method: `PUT` 
   - Updates details of a specific booking.

4. Create Booking
   - Endpoint: `/api/Booking` 
   - Method: `POST` 
   - Creates a new booking record.

5. Delete Booking
   - Endpoint: `/api/Booking/{id}` 
   - Method: `DELETE` 
   - Deletes a specific booking by `Bookingid`.

__________________________________________________________________
